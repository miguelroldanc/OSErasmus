Here are some possible solutions for the exercises in the 8th lab:

<! ------------------------------------------------ -------------------------------------------------- -------------------------------------------------- ->

Ex. 1, 3, 5 and 6. Try to solve them yourself. You can be inspired by solving exercises 2 and 4 below.

General remark: all the exercises in this laboratory are similar to the demonstration program from the practical lesson on padlocks on files, version 4,
i.e. they involve writing a program that will be run by launching several of its instances in parallel, and each instance will do
a certain processing, by minimum exclusive access, on a data file shared by all these execution instances of the respective program.

What differs from one exercise to another is only the operation of processing the contents of the shared data file, being processing operations
slightly more complex than the one made by the demonstration program from the practical lesson about padlocks on files.

Moreover, the types of data processed by these processing operations are also more complex, i.e. not just a character, but integers, or real numbers, and so on.
For this reason, the 'textual' representation of these data types (e.g. an integer in 'textual' representation is the string consisting of its digits, possibly
preceded by the sign '-', etc.) is not the most appropriate, because the storage of this representation occupies a variable number of bytes, depending on the value of that number!

For efficiency and ease of programming, all these data types must be represented 'in binary form' (e.g. an integer is represented in 'binary' using
complement encoding versus 2, a real number is represented using floating point encoding, etc.), which has the advantage that storing these representations
occupies a fixed number of bytes (e.g. any integer is stored at exactly sizeof (int) bytes, any real number is stored at exactly sizeof (float) bytes, etc.).
This way all the records in the shared data file will have a fixed length, which will greatly facilitate their concurrent processing.

(Note: do not confuse the binary representation of the data with their textual representation in base 2 (e.g., for integers, this would be the sequence of characters '0' and '1'
corresponding to the bit string in the binary representation of that integer).


<! ------------------------------------------------ -------------------------------------------------- -------------------------------------------------- ->

Ex.2 Implement the problem of the critical section of the course in the following scenario: a binary file, called "peco.bin", containing
      a real number (preferably stored in binary format, so that the file length is invariable, sizeof (float), the motivation being similar to the given explanation
      in the indication from exercise 1 above). This number represents the current volume of fuel in the tank of a CEEC station.
      On this resource, operations will be performed to supply the vehicles (i.e. extraction from the tank) and respectively to re-supply the station reserve.
      PECO (i.e. storage) of a quantity of fuel.
      Write a C program that performs various deposit and withdrawal operations at various time intervals, the quantities deposited and extracted respectively being
      specified as parameters on the command line, for example by calling:

      UNIX> ./prg-ex2 2550 -10.9 -35.42 3500 -20.45 ...

      a deposit of the quantity of 25,500 liters will be made first, then an extraction of the quantity of 10.9 liters, and so on.
      The program will access the file cooperatively using padlocks in writing during each deposition or extraction operation, so that
      to allow the simultaneous execution of two or more instances of the program, without undesirable effects due to the phenomenon of 'race conditions'.
      The deposit and withdrawal operations will be implemented so as to display on the screen explanatory messages about what is being done, messages that will be accompanied
      of the process PID.

First, we need a helper routine to create the initial data file (which will contain a real number, stored in binary format, representing the amount
initial fuel from the tank. We will call the program with the -i option to invoke this initialization routine.
Similarly, at the end of the updates, we will need another helper routine, which will display the final contents of the tank. We will call the program with the -o option for
invoke this final display routine.

The rest of the program will consist of the main routine, which will execute the sequence of updates received on the command line, in a concurrent manner, according to the
specified in the problem statement. Note: the main routine is not fully implemented below, but it is up to you to complete the "pieces" of code
missing (indicated by TODO comments).

For execution, several instances of the program will run in parallel, each with its own sequence of updates.
In other words, the simultaneous launch in simultaneous execution of several instances of the program will be done as follows:

UNIX> ./lab8_ex2 2550 -10.9 -35.42 3500 -20.45 ... & ./lab8_ex2 -10.5 -34.2 2500 -25.56 ... & ./lab8_ex2 ... & ...

lab8_ex2.c:
============

#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys / types.h>
#include <sys / stat.h>
#include <fcntl.h>
#include <unistd.h>

void initialization_date_file ();
void display_file_date ();
void update_squency (int n, char * nr []);


int main (int argc, char * argv [])
{
  if (argc == 1)
  {
     fprintf (stderr, "Error: program must be called with the options: -i, -o, or a sequence of real numbers ... \ n");
     return 1;
  }

  / * data file initialization case * /
  if (strcmp (argv [1], "- i") == 0)
  {
     initialize_date_file ();
     return 0;
  }

  / * data file display case * /
  if (strcmp (argv [1], "- o") == 0)
  {
     display_date_file ();
     return 0;
  }

  / * general case: updating the data file * /
  update_squency (argc, argv);
  return 0;
}



void initialize_data_file ()
{/ * Functionality: data file initialization * /

   int fd;
   float val;

   printf ("Give the initial amount of fuel (i.e., a positive real number):");
   while ((1! = scanf ("% f", & val)) && (val <0)) {fprintf (stderr, "Error: You did not enter a positive real number! Please try again ..."); }

   if (-1 == (fd = open ("peco.bin", O_WRONLY | O_CREAT | O_TRUNC, 0600)))
   {
      perror ("Error creating data file ..."); exit (2);
   }

   if (-1 == write (fd, & val, sizeof (float)))
   {
      perror ("Error writing initial value to data file ..."); exit (3);
   }

   close (fd);
}


void display_date_file ()
{/ * Functionality: displaying the data file * /

   int fd;
   float val;

   if (-1 == (fd = open ("peco.bin", O_RDONLY)))
   {
      perror ("Error opening data file display ..."); exit (4);
   }

   if (-1 == read (fd, & val, sizeof (float)))
   {
      perror ("Error reading the final value from the data file ..."); exit (5);
   }

   close (fd);

   printf ("The final fuel stock / quantity is:% f liters of fuel.", wave);
}

void update_squency (int n, char * nr [])
{/ * Functionality: sequence of data file update operations * /

   float value, stock;
   int fd, i;

   if (-1 == (fd = open ("peco.bin", O_RDWR)))
   {
      perror ("Error opening data file update ..."); exit (6);
   }

   srandom (getpid ()); // initialize the random number generator

   for (i = 1; i <n; i ++) // iterate through the sequence of real numbers specified in the command line
   {
      if (1! = sscanf (no [i], "% f", & value))
      {
         fprintf (stderr, "[PID:% d] Error: specified invalid value as real number argument:% s! \ n", getpid (), no [i]);
         exit (7);
      }

      / * start critical section * /
      / * TODO: implement the padlock writing on the file yourself ... * /

      if (-1 == lseek (fd, 0, SEEK_SET)) // (re) position the cursor at the beginning of the file
      {
         perror ("Error repositioning in data file, for reading ..."); exit (8);
      }
      if (-1 == read (fd, & stock, sizeof (float)))
      {
         perror ("Error reading value from data file ..."); exit (9);
      }

      printf ("[PID:% d] Add / extract to / from tank the amount of% f liters of fuel. \ n", getpid (), value);

      stock = stock + value;
      / * TODO: implement exception handling yourself: negative stock * /

      if (-1 == lseek (fd, 0, SEEK_SET)) // reposition the cursor at the beginning of the file
      {
         perror ("Error repositioning in data file, for writing ..."); exit (10);
      }
      if (-1 == write (fd, & stock, sizeof (float)))
      {
         perror ("Error writing the updated value in the data file ..."); exit (11);
      }
  
      / * end of critical section * /
      / * TODO: implement removing the padlock from the file yourself ... * /

      sleep (random ()% 5); // a random pause of up to 5 seconds before continuing with the next iteration
   }

   close (fd);
   printf ("I have finished processing the update sequence.");
}



<! ------------------------------------------------ -------------------------------------------------- -------------------------------------------------- ->

Ex.4 Write a C program that concurrently sorts a file, whose name will be given as a parameter on the command line, as described below.
      The file will contain an unordered sequence of integers. The program will sort the numbers in the file in ascending order using the classic Bubble-Sort algorithm:
      iterates in a loop through the sequence of numbers from the beginning of the sequence to its end, making inversions of the pairs that are not
      in the order 'smaller than'. The algorithm stops when no inversion was performed on the last run.
      At execution, two (or more) instances of the program will be launched, which will therefore operate simultaneously on the file. As a result, the program will have to
      to access the file cooperatively, using padlocks in writing during each inversion of the file to avoid effects
      unwanted. The padlocks will be placed only on the strictly necessary portion and only on the minimum required duration (similar to version 4 of the program
      demonstrative access discussed the course).
      (Hint: for efficiency and ease of programming, integers will be represented binary in the file, not textually, so that each
      integer to occupy exactly sizeof (int) bytes. This way all the records in the file will have a fixed length, which will make it easier to process them.
      Note: do not confuse the binary representation of the data with their textual representation in base 2 (in the sequence of characters '0' and '1'
      corresponding to the bit string in the binary representation). Read and write primitives use binary representation! )


a) First, we need a helper program to create the initial data file (which will contain a sequence of integers stored in
binary in file), a file that will then be used by the main sort program.

bin-write.c:
=============

#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys / types.h>
#include <sys / stat.h>
#include <fcntl.h>

int main ()
{
    int i, n, nr, fd;

    if (-1 == (fd = created ("fis.dat", 0600)))
    {
        perror ("Error creating data file");
exit (1);
    }

    printf ("Give the length of the sequence of numbers:");
    scanf ("% d", & n);

    for (i = 1; i <= n; i ++)
    {
        printf ("Give the% d number:", i);
scanf ("% d", & nr);
        if (-1 == write (fd, & nr, sizeof (int)))
        {
    perror ("Error writing to data file");
    exit (2);
        }
    }

    close (fd);
    return 0;
}

b) We will also need a second help program, which will show us on the screen the textual representation of the numbers in the sequence of numbers.
(stored in binary in the data file) that we will obtain after sorting.

bin-read.c:
=============

#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys / types.h>
#include <sys / stat.h>
#include <fcntl.h>

int main ()
{
    int nr, rcod, fd;

    if (-1 == (fd = open ("fis.dat", O_RDONLY)))
    {
        perror ("Error opening data file");
exit (1);
    }

    printf ("The sequence of numbers in the data file is: \ n");
    
    while (1)
    {
        if (-1 == (rcod = read (fd, & nr, sizeof (int))))
        {
    perror ("Error reading data file");
    exit (2);
        }
        if (0 == rcod) break;
        printf ("% d", no);
    }
    printf ("\ n \ n");

    close (fd);
    return 0;
}

c) Here is a first variant of the sorting program, which does not satisfy the requirement that several instances of the program can be launched simultaneously for
sort the same data file (the program does not use padlocks to ensure exclusive access to the modified file section at a given time
and, as a result, it will always work correctly only if a single instance of the program is launched to sort a data file):

lab8_ex4_fara-lacate.c:
=======================

/ *
* The first option, to sort a file, in which we do not use padlocks.
* The solution is correct only if a single instance of the program is run.
* /

#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>

void bubble_sort (int filedescr);

int main (int argc, char * argv [])
{
    int fd;
    if (argc <2)
    {
printf ("Usage:% s datafile \ n", argv [0]);
exit (1);
    }

    if (-1 == (fd = open (argv [1], O_RDWR)))
    {
        perror ("Error opening data file");
        exit (2);
    }
    
    bubble_sort (fd);

    close (fd);
    return 0;
}


void bubble_sort (int filedescr)
{
    int rcod1, rcod2;
    int number1, number2;

    int change = 1;

    / * loop in which we do repeated traversals * /
    while (edit)
    {
change = 0; / * will be set if at least one inversion is made to the current traversal * /

/ * loop for a single file scrolling * /
while (1)
{
rcod1 = read (filedescr, & numar1, sizeof (int));
if (rcod1 == 0) break; / * I got to EOF * /
if (rcod1 == - 1)
{
perror ("Error reading the first number in a pair");
exit (3);
}

rcod2 = read (filedescr, & num2, sizeof (int));
if (rcod2 == 0) break; / * I got to EOF * /
if (rcod2 == - 1)
{
perror ("Error reading second number in a pair");
exit (4);
}

/ * if there is an inversion, we change them in the file * /
if (number1> number2)
{
change = 1;

/ * we go back with 2 integers to rewrite * /
if (-1 == lseek (filedescr, -2 * sizeof (int), SEEK_CUR))
{
perror ("Error (1) when repositioning back in file");
exit (5);
}

if (-1 == write (filedescr, & numar2, sizeof (int)))
{
perror ("Error rewriting the first number in a pair");
exit (6);
}

if (-1 == write (filedescr, & numar1, sizeof (int)))
{
perror ("Error rewriting the second number in a pair");
exit (7);
}

}

/ * we prepare the following iteration: the first number in the new pair is the second number in the previous pair * /
if (-1 == lseek (filedescr, -sizeof (int), SEEK_CUR))
{
perror ("Error (2) when repositioning back in file");
exit (8);
}
} / * end of loop for single file scrolling * /

/ * we prepare the following process: we reposition ourselves at the beginning of the file * /
if (-1 == lseek (filedescr, 0L, SEEK_SET))
{
perror ("Error (3) when repositioning back in file");
exit (9);
}

    } / * end of loop repeat * /
}


d) Here is the concurrent version of the sorting program, which satisfies the requirement that several instances of the program can be launched simultaneously for
sort the same data file (the program uses padlocks to provide exclusive access to the modified file section at a time, and,
as a result, it will always work correctly, even when launching multiple instances simultaneously to sort a data file):

lab8_ex4_cu-lacate.c:
=====================

/ *
* The second option, to sort a file, in which we use locks, placed on minimum sections and maintained for minimum durations.
* The solution is also correct when several instances of the program are running at the same time, on the same data file.
* /

#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>

void bubble_sort_with_blocks (int filedescr);

int main (int argc, char * argv [])
{
    int fd;
    if (argc <2)
    {
printf ("Usage:% s datafile \ n", argv [0]);
exit (1);
    }

    if (-1 == (fd = open (argv [1], O_RDWR)))
    {
        perror ("Error opening data file");
        exit (2);
    }
    
    bubble_sort_cu_blocaje (fd);

    close (fd);
    return 0;
}


void bubble_sort_with_blocks (int filedescr)
{
    int rcod1, rcod2;
    int number1, number2;
    int number1_read, number2_read;

    struct flock lock_lock, lock_lock;

    lock_block.l_type = F_WRLCK;
    lock_block.l_whence = SEEK_CUR;
    lock_block.l_start = 0;
    lacat_blocaj.l_len = 2 * sizeof (int);

    lacat_deblocaj.l_type = F_UNLCK;
    lacat_deblocaj.l_whence = SEEK_CUR;
    lacat_deblocaj.l_start = -2 * sizeof (int);
    lacat_deblocaj.l_len = 2 * sizeof (int);

    int change = 1;

    / * loop in which we do repeated traversals * /
    while (edit)
    {
change = 0; / * will be set if at least one inversion is made to the current traversal * /

/ * loop for a single file scrolling * /
while (1)
{
rcod1 = read (filedescr, & numar1, sizeof (int));
if (rcod1 == 0) break;
if (rcod1 == - 1)
{
perror ("Error reading the first number in a pair");
exit (3);
}

rcod2 = read (filedescr, & num2, sizeof (int));
if (rcod2 == 0) break;
if (rcod2 == - 1)
{
perror ("Error reading the second number in a pair");
exit (4);
}

/ * if there is an inversion, we change them in the file * /
/ * same as in the demo version access4.c from the course: first we put the lock, then we check if neither of the two numbers
it has not been somehow changed in the meantime by another instance of program execution, and only in affirmative case we rewrite * /
if (number1> number2)
{
/ * we go back with 2 integers to do the verification and then, possibly, the rewriting * /
if (-1 == lseek (filedescr, -2 * sizeof (int), SEEK_CUR))
{
perror ("Error (1) when repositioning back in file");
exit (5);
}

/ * we put the block on the portion that contained the two barely read numbers * /
if (-1 == fcntl (filedescr, F_SETLKW, & lock_lock))
{
perror ("Lock error");
exit (10);
}

/ * we reread the 2 numbers * /
if (-1 == read (filedescr, & number1_recited, sizeof (int)))
{
perror ("Error rereading the first number in a pair");
exit (11);
}

if (-1 == read (filedescr, & number2_recited, sizeof (int)))
{
perror ("Error rereading the second number in a pair");
exit (12);
}

/ * if the numbers have remained unchanged, then we perform the rewrite / inversion * /
if ((number1 == number1_read) && (number2 == number2_read))
{
    change = 1;

/ * we go back with 2 integers to rewrite * /
if (-1 == lseek (filedescr, -2 * sizeof (int), SEEK_CUR))
{
perror ("Error (4) when repositioning back in file");
exit (13);
}

if (-1 == write (filedescr, & numar2, sizeof (int)))
{
perror ("Error rewriting the first number in a pair");
exit (14);
}

if (-1 == write (filedescr, & numar1, sizeof (int)))
{
perror ("Error rewriting the second number in a pair");
exit (15);
}
}

/ * whether or not we reversed, the locked portion above must now be debugged
(i.e. we remove the block on the portion that contained the two numbers) * /
if (-1 == fcntl (filedescr, F_SETLKW, & unlock_lock))
{
perror ("Unlock error");
exit (16);
}
}

/ * we prepare the following iteration: the first number in the new pair is the second number in the previous pair * /
if (-1 == lseek (filedescr, -sizeof (int), SEEK_CUR))
{
perror ("Error (2) when repositioning back in file");
exit (8);
}
} / * end of loop for single file scrolling * /

/ * we prepare the following process: we reposition ourselves at the beginning of the file * /
if (-1 == lseek (filedescr, 0L, SEEK_SET))
{
perror ("Error (3) when repositioning back in file");
exit (9);
}

    } / * end of repeat loop * /
}


Note: the simultaneous launch in simultaneous execution of several instances of the program will be done as follows:

UNIX> ./lab8_ex4_cu-lacate fis.dat & ./lab8_ex4_cu-lacate fis.dat & ./lab8_ex4_cu-lacate fis.dat & ...

<! ------------------------------------------------ -------------------------------------------------- -------------------------------------------------- ->